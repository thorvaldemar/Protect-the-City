package cam.thorvaldemar;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferStrategy;
import java.util.ArrayList;
import java.util.Random;

import cam.thorvaldemar.debugging.fPLS;

public class Game extends Canvas implements Runnable {

	private static final long serialVersionUID = -3604244978043701421L;

	public static final int WIDTH = (21*32) + 6, HEIGHT = (15*32) - 3;
	public static Color backgroundColor = Color.WHITE;
	
	private Thread thread;
	private boolean running = false;
	
	private Handler handler;
	public static Camera camera;
	
	public int frames = 0;
	public int fframes = 0;
	
	ArrayList<Integer> starsX = new ArrayList<Integer>();
	ArrayList<Integer> starsY = new ArrayList<Integer>();
	
	Random r = new Random();
	
	public Game() {
		handler = new Handler();
		camera = new Camera(0, 0);
		this.addKeyListener(new KeyInput(handler));
		this.addMouseMotionListener(new Mouse(handler));
		this.addMouseListener(new Mouse(handler));
		
		new Window(WIDTH, HEIGHT, "Minecraft2D", this);
		
		Handler.addObject(new fPLS(new Vector(10*32, 5*32), new Vector(31, 31)));
		
		for (int x = 0; x < WIDTH; x++) {
			for (int y = 0; y < HEIGHT; y++) {
				if (r.nextInt(100) == 49) {
					starsX.add(x);
					starsY.add(y);
				}
			}
		}
		
	}
	
	int time = 1;
	private void tick() {
		handler.tick();
		time += 1;
		camera.tick();
	}
	
	private void render() {
		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null) {
			this.createBufferStrategy(3);
			return;
		}
		
		Graphics g = bs.getDrawGraphics();
		Graphics2D g2d = (Graphics2D) g;
		
		g.setColor(backgroundColor);
		g.fillRect(0, 0, WIDTH, HEIGHT);
		
		g2d.translate(-camera.position().X(), -camera.position().Y());
		handler.render(g);
		
		double mouseX = Mouse.getX();
		double mouseY = Mouse.getY();
		
		g.setColor(Color.black);
		g.drawRect((int) (mouseX - (mouseX % 32)), (int) (mouseY - (mouseY % 32)), 31, 31);
		
		g.setColor(Color.YELLOW);
		g.drawString("FPS: " + (fframes), camera.position().X() + 1, camera.position().Y() + 12);
		
		g.dispose();
		bs.show();
		
	}
	
	int loadedTimes = 0;
	boolean firstTimeLoad() {
		if (loadedTimes > 10000) {
			return false;
		} else {
			loadedTimes += 1;
		}
		return true;
	}
	
	public synchronized void start() {
		thread = new Thread(this);
		thread.start();
		running = true;
	}
	
	public synchronized void stop() {
		try {
			thread.join();
			running = false;
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void run() {
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		while (running) {
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while (delta >= 1) {
				tick();
				delta--;
			}
			if (running) {
				render();
				frames++;
			}
			
			if (System.currentTimeMillis() - timer > 1000) {
				timer += 1000;
				fframes = frames;
				//System.out.println("FPS: " + frames);
				frames = 0;
			}	
		}
		stop();
	}
	
	public static void main(String args[]) {
		new Game();
	}
	
}
