package me.thorvaldemar;

import me.thorvaldemar.engine.Game;
import me.thorvaldemar.engine.GameObject;
import me.thorvaldemar.engine.Handler;
import me.thorvaldemar.engine.Vector;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Random;

import me.thorvaldemar.Entities.Player;
import me.thorvaldemar.Entities.Zombies.NormalZombie;
import me.thorvaldemar.Levels.Level1;

public class Main {

	static Player player = null;

	public static int round = 1;

	public void onEnable() {
		System.out.println("The game has started");
		//System.out.println(Game.imgDirectory);
		Game.loadLevel(new Level1());
		getPlayer();
		// Game.backgroundColor = new Color(10, 7, 79);

	}

	public static void getPlayer() {
		for (GameObject obj : Handler.getAllGameObjects()) {
			if (obj.getClass() == Player.class) {
				player = (Player) obj;
				break;
			}
		}
	}
	
	public void update() {
		int zombies = 0;

		ArrayList<GameObject> objects = new ArrayList<GameObject>();

		for (GameObject obj : Handler.unRenderedObject) {
			objects.add(obj);
		}

		for (GameObject obj : objects) {
			Handler.removeObject(obj);
		}

		for (GameObject obj : Handler.getAllGameObjects()) {

			if (obj.getClass() == NormalZombie.class) {
				zombies += 1;
			}
		}
		if (zombies <= 0) {
			round += 1;
			nextRound();
		}
		
		if (player.Health <= 0) {
			Handler.paused = true;
		}
	}

	public void onDisable() {

	}

	static Random r = new Random();

	public static void nextRound() {
		// int spawnPoint = r.nextInt(4);
		for (int i = 0; i <= round * 2; i++) {
			int x = r.nextInt(Game.WIDTH + 600) - 300;
			int y = r.nextInt(Game.HEIGHT + 600) - 300;
			while (x > 0 && x < Game.WIDTH) {
				x = r.nextInt(Game.WIDTH + 600) - 300;
			}
			while (y > 0 && y < Game.HEIGHT) {
				y = r.nextInt(Game.WIDTH + 600) - 300;
			}
			Handler.addObject(new NormalZombie(new Vector(x, y), new Vector(32, 32)));
		}
	}

	public void onGUI(Graphics g) {
		g.setColor(Color.WHITE);
		Font font = new Font("areal", Font.BOLD, 24);
		g.setFont(font);
		g.drawString(round + "", 10, Game.HEIGHT - 40);

		// Bullets
		if (player.reloading) {
			g.setColor(Color.orange);
			for (int i = 1; i <= player.maxBullets/player.reloadingTimer; i++) {
				g.fillRect(Game.WIDTH - 20, (Game.HEIGHT - 40) - i * 4, 6, 3);
			}
		} else {
			g.setColor(Color.yellow);
			for (int i = 1; i <= player.Bullets; i++) {
				g.fillRect(Game.WIDTH - 20, (Game.HEIGHT - 40) - i * 4, 6, 3);
			}
		}

		//Ammo
		g.setColor(Color.yellow);
		Font ammo = new Font("areal", Font.BOLD, 16);
		g.setFont(ammo);
		g.drawString(player.ammo + "", Game.WIDTH - 50, Game.HEIGHT - 40);
		
		//Gun
		if (Weapons.isPistol(player.gunSlot)) {
			g.drawImage(GameObject.getImage(Weapons.getImage(player.gunSlot)), 0, 0, 64, 64, null);
		} else {
			g.drawImage(GameObject.getImage(Weapons.getImage(player.gunSlot)), 0, 0, 128, 64, null);
		}
		
		//Gun name
		g.setColor(Color.WHITE);
		Font name = new Font("areal", Font.BOLD, 16);
		g.setFont(name);
		g.drawString(player.gunSlot.name().replaceAll("_", " "), 10, 80);
		
		
		// Health
		g.setColor(Color.RED);
		for (int i = 1; i <= player.Health/2; i++) {
			g.fillRect(Game.WIDTH - 30, (Game.HEIGHT - 40) - i * 4, 6, 3);
		}
		
		//Is dead
		if (player.Health <= 0) {
			g.setColor(new Color(150, 0, 0, 200));
			g.fillRect(0, 0, Game.WIDTH, Game.HEIGHT);
			g.setColor(Color.WHITE);
			Font died = new Font("areal", Font.BOLD, 72);
			g.setFont(died);
			g.drawString("YOU DIED", Game.WIDTH/2-(8*21), Game.HEIGHT/2-(8*2));
			
			Font con = new Font("areal", 0, 12);
			g.setFont(con);
			g.drawString("\'SPACE\' to try again", Game.WIDTH/2-(8*6), Game.HEIGHT/2+10);
		}
	}

}
